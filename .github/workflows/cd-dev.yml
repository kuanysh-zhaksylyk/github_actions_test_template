name: Dev Manual Deployment

on:
  workflow_dispatch:
    inputs:
      build-services:
        description: 'Build Project Services (comma-separated list of services, e.g., "py-agents, problem-solver, sc-web")'
        required: false
        type: string
      update-platform:
        description: 'Update Platform'
        required: false
        type: boolean
      update-submodules:
        description: 'Update Platform Submodules'
        required: false
        type: boolean
      
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Update repository and build project
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          set -e
          cd ${{ secrets.WORK_DIR }}
          git status
          git stash
          git checkout develop
          git pull
          git stash pop || true        
          docker compose down
          
          if [ "${{ inputs.update-platform }}" = "true" ]; then
            ./scripts/install_submodules.sh update-platform
          fi
          
          if [ "${{ inputs.update-submodules }}" = "true" ]; then
            ./scripts/install_submodules.sh update-platform-submodules
          fi
        
          if [ "${{ inputs.build-service }}" = "true" ]; then
            if [ -z "${{ inputs.build-services }}" ]; then
              docker compose build
            else
              IFS=',' read -ra SERVICES <<< "${{ inputs.build-services }}"
              for service in "${SERVICES[@]}"; do
                docker compose build $service
              done
            fi
          fi
          
    - name: Run project containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |   
          set -e
          cd ${{ secrets.WORK_DIR }}
          docker compose run --rm problem-solver build /kb/repo.path
          docker compose up -d
          docker compose ps
          docker compose logs problem-solver --tail=100 
          exit
         
       